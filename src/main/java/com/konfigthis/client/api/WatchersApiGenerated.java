/*
 * Swagger CrowdSec
 * CrowdSec local API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@crowdsec.net
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Alert;
import com.konfigthis.client.model.DeleteAlertsResponse;
import com.konfigthis.client.model.DeleteDecisionResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.WatcherAuthRequest;
import com.konfigthis.client.model.WatcherAuthResponse;
import com.konfigthis.client.model.WatcherRegistrationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WatchersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WatchersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WatchersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call authenticateSessionCall(WatcherAuthRequest watcherAuthRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watcherAuthRequest;

        // create path and map variables
        String localVarPath = "/watchers/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authenticateSessionValidateBeforeCall(WatcherAuthRequest watcherAuthRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watcherAuthRequest' is set
        if (watcherAuthRequest == null) {
            throw new ApiException("Missing the required parameter 'watcherAuthRequest' when calling authenticateSession(Async)");
        }

        return authenticateSessionCall(watcherAuthRequest, _callback);

    }


    private ApiResponse<WatcherAuthResponse> authenticateSessionWithHttpInfo(WatcherAuthRequest watcherAuthRequest) throws ApiException {
        okhttp3.Call localVarCall = authenticateSessionValidateBeforeCall(watcherAuthRequest, null);
        Type localVarReturnType = new TypeToken<WatcherAuthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call authenticateSessionAsync(WatcherAuthRequest watcherAuthRequest, final ApiCallback<WatcherAuthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authenticateSessionValidateBeforeCall(watcherAuthRequest, _callback);
        Type localVarReturnType = new TypeToken<WatcherAuthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AuthenticateSessionRequestBuilder {
        private final String machineId;
        private final String password;
        private List<String> scenarios;

        private AuthenticateSessionRequestBuilder(String machineId, String password) {
            this.machineId = machineId;
            this.password = password;
        }

        /**
         * Set scenarios
         * @param scenarios the list of scenarios enabled on the watcher (optional)
         * @return AuthenticateSessionRequestBuilder
         */
        public AuthenticateSessionRequestBuilder scenarios(List<String> scenarios) {
            this.scenarios = scenarios;
            return this;
        }
        
        /**
         * Build call for authenticateSession
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Login successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WatcherAuthRequest watcherAuthRequest = buildBodyParams();
            return authenticateSessionCall(watcherAuthRequest, _callback);
        }

        private WatcherAuthRequest buildBodyParams() {
            WatcherAuthRequest watcherAuthRequest = new WatcherAuthRequest();
            watcherAuthRequest.machineId(this.machineId);
            watcherAuthRequest.password(this.password);
            watcherAuthRequest.scenarios(this.scenarios);
            return watcherAuthRequest;
        }

        /**
         * Execute authenticateSession request
         * @return WatcherAuthResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Login successful </td><td>  -  </td></tr>
         </table>
         */
        public WatcherAuthResponse execute() throws ApiException {
            WatcherAuthRequest watcherAuthRequest = buildBodyParams();
            ApiResponse<WatcherAuthResponse> localVarResp = authenticateSessionWithHttpInfo(watcherAuthRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute authenticateSession request with HTTP info returned
         * @return ApiResponse&lt;WatcherAuthResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Login successful </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WatcherAuthResponse> executeWithHttpInfo() throws ApiException {
            WatcherAuthRequest watcherAuthRequest = buildBodyParams();
            return authenticateSessionWithHttpInfo(watcherAuthRequest);
        }

        /**
         * Execute authenticateSession request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Login successful </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WatcherAuthResponse> _callback) throws ApiException {
            WatcherAuthRequest watcherAuthRequest = buildBodyParams();
            return authenticateSessionAsync(watcherAuthRequest, _callback);
        }
    }

    /**
     * AuthenticateWatcher
     * Authenticate current to get session ID
     * @param watcherAuthRequest Information about the watcher to be reset (required)
     * @return AuthenticateSessionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Login successful </td><td>  -  </td></tr>
     </table>
     */
    public AuthenticateSessionRequestBuilder authenticateSession(String machineId, String password) throws IllegalArgumentException {
        if (machineId == null) throw new IllegalArgumentException("\"machineId\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        return new AuthenticateSessionRequestBuilder(machineId, password);
    }
    private okhttp3.Call createAlertsCall(List<Alert> alert, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = alert;

        // create path and map variables
        String localVarPath = "/alerts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTAuthorizer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAlertsValidateBeforeCall(List<Alert> alert, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alert' is set
        if (alert == null) {
            throw new ApiException("Missing the required parameter 'alert' when calling createAlerts(Async)");
        }

        return createAlertsCall(alert, _callback);

    }


    private ApiResponse<List<String>> createAlertsWithHttpInfo(List<Alert> alert) throws ApiException {
        okhttp3.Call localVarCall = createAlertsValidateBeforeCall(alert, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAlertsAsync(List<Alert> alert, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAlertsValidateBeforeCall(alert, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateAlertsRequestBuilder {
        private List<Alert> alert;

        private CreateAlertsRequestBuilder() {
        }

        /**
         * Set alert
         * @param alert Push alerts to the API (optional)
         * @return CreateAlertsRequestBuilder
         */
        public CreateAlertsRequestBuilder alert(List<Alert> alert) {
            this.alert = alert;
            return this;
        }

        /**
         * Build call for createAlerts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Alert(s) created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<Alert> alert = buildBodyParams();
            return createAlertsCall(alert, _callback);
        }

        private List<Alert> buildBodyParams() {
            return this.alert;
        }

        /**
         * Execute createAlerts request
         * @return List&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Alert(s) created </td><td>  -  </td></tr>
         </table>
         */
        public List<String> execute() throws ApiException {
            List<Alert> alert = buildBodyParams();
            ApiResponse<List<String>> localVarResp = createAlertsWithHttpInfo(alert);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createAlerts request with HTTP info returned
         * @return ApiResponse&lt;List&lt;String&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Alert(s) created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<String>> executeWithHttpInfo() throws ApiException {
            List<Alert> alert = buildBodyParams();
            return createAlertsWithHttpInfo(alert);
        }

        /**
         * Execute createAlerts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Alert(s) created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<String>> _callback) throws ApiException {
            List<Alert> alert = buildBodyParams();
            return createAlertsAsync(alert, _callback);
        }
    }

    /**
     * pushAlerts
     * Push alerts to API
     * @param alert Push alerts to the API (required)
     * @return CreateAlertsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Alert(s) created </td><td>  -  </td></tr>
     </table>
     */
    public CreateAlertsRequestBuilder createAlerts() throws IllegalArgumentException {
        return new CreateAlertsRequestBuilder();
    }
    private okhttp3.Call deleteAlertByIdCall(String alertId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alerts/{alert_id}"
            .replace("{" + "alert_id" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTAuthorizer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAlertByIdValidateBeforeCall(String alertId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling deleteAlertById(Async)");
        }

        return deleteAlertByIdCall(alertId, _callback);

    }


    private ApiResponse<DeleteAlertsResponse> deleteAlertByIdWithHttpInfo(String alertId) throws ApiException {
        okhttp3.Call localVarCall = deleteAlertByIdValidateBeforeCall(alertId, null);
        Type localVarReturnType = new TypeToken<DeleteAlertsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteAlertByIdAsync(String alertId, final ApiCallback<DeleteAlertsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAlertByIdValidateBeforeCall(alertId, _callback);
        Type localVarReturnType = new TypeToken<DeleteAlertsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteAlertByIdRequestBuilder {
        private final String alertId;

        private DeleteAlertByIdRequestBuilder(String alertId) {
            this.alertId = alertId;
        }

        /**
         * Build call for deleteAlertById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAlertByIdCall(alertId, _callback);
        }


        /**
         * Execute deleteAlertById request
         * @return DeleteAlertsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public DeleteAlertsResponse execute() throws ApiException {
            ApiResponse<DeleteAlertsResponse> localVarResp = deleteAlertByIdWithHttpInfo(alertId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteAlertById request with HTTP info returned
         * @return ApiResponse&lt;DeleteAlertsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteAlertsResponse> executeWithHttpInfo() throws ApiException {
            return deleteAlertByIdWithHttpInfo(alertId);
        }

        /**
         * Execute deleteAlertById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteAlertsResponse> _callback) throws ApiException {
            return deleteAlertByIdAsync(alertId, _callback);
        }
    }

    /**
     * DeleteAlert
     * Delete alert for given alert ID (only from cscli)
     * @param alertId  (required)
     * @return DeleteAlertByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAlertByIdRequestBuilder deleteAlertById(String alertId) throws IllegalArgumentException {
        if (alertId == null) throw new IllegalArgumentException("\"alertId\" is required but got null");
            

        return new DeleteAlertByIdRequestBuilder(alertId);
    }
    private okhttp3.Call getAlertByIdCall(String alertId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alerts/{alert_id}"
            .replace("{" + "alert_id" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTAuthorizer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlertByIdValidateBeforeCall(String alertId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling getAlertById(Async)");
        }

        return getAlertByIdCall(alertId, _callback);

    }


    private ApiResponse<Alert> getAlertByIdWithHttpInfo(String alertId) throws ApiException {
        okhttp3.Call localVarCall = getAlertByIdValidateBeforeCall(alertId, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAlertByIdAsync(String alertId, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlertByIdValidateBeforeCall(alertId, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAlertByIdRequestBuilder {
        private final String alertId;

        private GetAlertByIdRequestBuilder(String alertId) {
            this.alertId = alertId;
        }

        /**
         * Build call for getAlertById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAlertByIdCall(alertId, _callback);
        }


        /**
         * Execute getAlertById request
         * @return Alert
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public Alert execute() throws ApiException {
            ApiResponse<Alert> localVarResp = getAlertByIdWithHttpInfo(alertId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAlertById request with HTTP info returned
         * @return ApiResponse&lt;Alert&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Alert> executeWithHttpInfo() throws ApiException {
            return getAlertByIdWithHttpInfo(alertId);
        }

        /**
         * Execute getAlertById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Alert> _callback) throws ApiException {
            return getAlertByIdAsync(alertId, _callback);
        }
    }

    /**
     * GetAlertByID
     * Get alert by ID
     * @param alertId  (required)
     * @return GetAlertByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetAlertByIdRequestBuilder getAlertById(String alertId) throws IllegalArgumentException {
        if (alertId == null) throw new IllegalArgumentException("\"alertId\" is required but got null");
            

        return new GetAlertByIdRequestBuilder(alertId);
    }
    private okhttp3.Call getAlertById_0Call(String alertId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alerts/{alert_id}"
            .replace("{" + "alert_id" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTAuthorizer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAlertById_0ValidateBeforeCall(String alertId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling getAlertById_0(Async)");
        }

        return getAlertById_0Call(alertId, _callback);

    }


    private ApiResponse<Void> getAlertById_0WithHttpInfo(String alertId) throws ApiException {
        okhttp3.Call localVarCall = getAlertById_0ValidateBeforeCall(alertId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getAlertById_0Async(String alertId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAlertById_0ValidateBeforeCall(alertId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetAlertById0RequestBuilder {
        private final String alertId;

        private GetAlertById0RequestBuilder(String alertId) {
            this.alertId = alertId;
        }

        /**
         * Build call for getAlertById_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAlertById_0Call(alertId, _callback);
        }


        /**
         * Execute getAlertById_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getAlertById_0WithHttpInfo(alertId);
        }

        /**
         * Execute getAlertById_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getAlertById_0WithHttpInfo(alertId);
        }

        /**
         * Execute getAlertById_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getAlertById_0Async(alertId, _callback);
        }
    }

    /**
     * GetAlertByID
     * Get alert by ID
     * @param alertId  (required)
     * @return GetAlertById0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
     </table>
     */
    public GetAlertById0RequestBuilder getAlertById_0(String alertId) throws IllegalArgumentException {
        if (alertId == null) throw new IllegalArgumentException("\"alertId\" is required but got null");
            

        return new GetAlertById0RequestBuilder(alertId);
    }
    private okhttp3.Call listAlertsCall(String scope, String value, String scenario, String ip, String range, OffsetDateTime since, OffsetDateTime until, Boolean simulated, Boolean hasActiveDecision, String decisionType, Double limit, String origin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alerts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (scenario != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenario", scenario));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (simulated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("simulated", simulated));
        }

        if (hasActiveDecision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_active_decision", hasActiveDecision));
        }

        if (decisionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decision_type", decisionType));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTAuthorizer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAlertsValidateBeforeCall(String scope, String value, String scenario, String ip, String range, OffsetDateTime since, OffsetDateTime until, Boolean simulated, Boolean hasActiveDecision, String decisionType, Double limit, String origin, final ApiCallback _callback) throws ApiException {
        return listAlertsCall(scope, value, scenario, ip, range, since, until, simulated, hasActiveDecision, decisionType, limit, origin, _callback);

    }


    private ApiResponse<List<Alert>> listAlertsWithHttpInfo(String scope, String value, String scenario, String ip, String range, OffsetDateTime since, OffsetDateTime until, Boolean simulated, Boolean hasActiveDecision, String decisionType, Double limit, String origin) throws ApiException {
        okhttp3.Call localVarCall = listAlertsValidateBeforeCall(scope, value, scenario, ip, range, since, until, simulated, hasActiveDecision, decisionType, limit, origin, null);
        Type localVarReturnType = new TypeToken<List<Alert>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAlertsAsync(String scope, String value, String scenario, String ip, String range, OffsetDateTime since, OffsetDateTime until, Boolean simulated, Boolean hasActiveDecision, String decisionType, Double limit, String origin, final ApiCallback<List<Alert>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAlertsValidateBeforeCall(scope, value, scenario, ip, range, since, until, simulated, hasActiveDecision, decisionType, limit, origin, _callback);
        Type localVarReturnType = new TypeToken<List<Alert>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAlertsRequestBuilder {
        private String scope;
        private String value;
        private String scenario;
        private String ip;
        private String range;
        private OffsetDateTime since;
        private OffsetDateTime until;
        private Boolean simulated;
        private Boolean hasActiveDecision;
        private String decisionType;
        private Double limit;
        private String origin;

        private ListAlertsRequestBuilder() {
        }

        /**
         * Set scope
         * @param scope show alerts for this scope (optional)
         * @return ListAlertsRequestBuilder
         */
        public ListAlertsRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Set value
         * @param value show alerts for this value (used with scope) (optional)
         * @return ListAlertsRequestBuilder
         */
        public ListAlertsRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set scenario
         * @param scenario show alerts for this scenario (optional)
         * @return ListAlertsRequestBuilder
         */
        public ListAlertsRequestBuilder scenario(String scenario) {
            this.scenario = scenario;
            return this;
        }
        
        /**
         * Set ip
         * @param ip IP to search for (shorthand for scope&#x3D;ip&amp;value&#x3D;) (optional)
         * @return ListAlertsRequestBuilder
         */
        public ListAlertsRequestBuilder ip(String ip) {
            this.ip = ip;
            return this;
        }
        
        /**
         * Set range
         * @param range range to search for (shorthand for scope&#x3D;range&amp;value&#x3D;) (optional)
         * @return ListAlertsRequestBuilder
         */
        public ListAlertsRequestBuilder range(String range) {
            this.range = range;
            return this;
        }
        
        /**
         * Set since
         * @param since search alerts newer than delay (format must be compatible with time.ParseDuration) (optional)
         * @return ListAlertsRequestBuilder
         */
        public ListAlertsRequestBuilder since(OffsetDateTime since) {
            this.since = since;
            return this;
        }
        
        /**
         * Set until
         * @param until search alerts older than delay (format must be compatible with time.ParseDuration) (optional)
         * @return ListAlertsRequestBuilder
         */
        public ListAlertsRequestBuilder until(OffsetDateTime until) {
            this.until = until;
            return this;
        }
        
        /**
         * Set simulated
         * @param simulated if set to true, decisions in simulation mode will be returned as well (optional)
         * @return ListAlertsRequestBuilder
         */
        public ListAlertsRequestBuilder simulated(Boolean simulated) {
            this.simulated = simulated;
            return this;
        }
        
        /**
         * Set hasActiveDecision
         * @param hasActiveDecision only return alerts with decisions not expired yet (optional)
         * @return ListAlertsRequestBuilder
         */
        public ListAlertsRequestBuilder hasActiveDecision(Boolean hasActiveDecision) {
            this.hasActiveDecision = hasActiveDecision;
            return this;
        }
        
        /**
         * Set decisionType
         * @param decisionType restrict results to alerts with decisions matching given type (optional)
         * @return ListAlertsRequestBuilder
         */
        public ListAlertsRequestBuilder decisionType(String decisionType) {
            this.decisionType = decisionType;
            return this;
        }
        
        /**
         * Set limit
         * @param limit number of alerts to return (optional)
         * @return ListAlertsRequestBuilder
         */
        public ListAlertsRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set origin
         * @param origin restrict results to this origin (ie. lists,CAPI,cscli) (optional)
         * @return ListAlertsRequestBuilder
         */
        public ListAlertsRequestBuilder origin(String origin) {
            this.origin = origin;
            return this;
        }
        
        /**
         * Build call for listAlerts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAlertsCall(scope, value, scenario, ip, range, since, until, simulated, hasActiveDecision, decisionType, limit, origin, _callback);
        }


        /**
         * Execute listAlerts request
         * @return List&lt;Alert&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public List<Alert> execute() throws ApiException {
            ApiResponse<List<Alert>> localVarResp = listAlertsWithHttpInfo(scope, value, scenario, ip, range, since, until, simulated, hasActiveDecision, decisionType, limit, origin);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAlerts request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Alert&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Alert>> executeWithHttpInfo() throws ApiException {
            return listAlertsWithHttpInfo(scope, value, scenario, ip, range, since, until, simulated, hasActiveDecision, decisionType, limit, origin);
        }

        /**
         * Execute listAlerts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Alert>> _callback) throws ApiException {
            return listAlertsAsync(scope, value, scenario, ip, range, since, until, simulated, hasActiveDecision, decisionType, limit, origin, _callback);
        }
    }

    /**
     * searchAlerts
     * Allows to search for alerts
     * @return ListAlertsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ListAlertsRequestBuilder listAlerts() throws IllegalArgumentException {
        return new ListAlertsRequestBuilder();
    }
    private okhttp3.Call registerWatcherCall(WatcherRegistrationRequest watcherRegistrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = watcherRegistrationRequest;

        // create path and map variables
        String localVarPath = "/watchers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerWatcherValidateBeforeCall(WatcherRegistrationRequest watcherRegistrationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'watcherRegistrationRequest' is set
        if (watcherRegistrationRequest == null) {
            throw new ApiException("Missing the required parameter 'watcherRegistrationRequest' when calling registerWatcher(Async)");
        }

        return registerWatcherCall(watcherRegistrationRequest, _callback);

    }


    private ApiResponse<Void> registerWatcherWithHttpInfo(WatcherRegistrationRequest watcherRegistrationRequest) throws ApiException {
        okhttp3.Call localVarCall = registerWatcherValidateBeforeCall(watcherRegistrationRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call registerWatcherAsync(WatcherRegistrationRequest watcherRegistrationRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerWatcherValidateBeforeCall(watcherRegistrationRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RegisterWatcherRequestBuilder {
        private final String machineId;
        private final String password;

        private RegisterWatcherRequestBuilder(String machineId, String password) {
            this.machineId = machineId;
            this.password = password;
        }

        /**
         * Build call for registerWatcher
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Watcher Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WatcherRegistrationRequest watcherRegistrationRequest = buildBodyParams();
            return registerWatcherCall(watcherRegistrationRequest, _callback);
        }

        private WatcherRegistrationRequest buildBodyParams() {
            WatcherRegistrationRequest watcherRegistrationRequest = new WatcherRegistrationRequest();
            watcherRegistrationRequest.machineId(this.machineId);
            watcherRegistrationRequest.password(this.password);
            return watcherRegistrationRequest;
        }

        /**
         * Execute registerWatcher request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Watcher Created </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            WatcherRegistrationRequest watcherRegistrationRequest = buildBodyParams();
            registerWatcherWithHttpInfo(watcherRegistrationRequest);
        }

        /**
         * Execute registerWatcher request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Watcher Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WatcherRegistrationRequest watcherRegistrationRequest = buildBodyParams();
            return registerWatcherWithHttpInfo(watcherRegistrationRequest);
        }

        /**
         * Execute registerWatcher request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Watcher Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WatcherRegistrationRequest watcherRegistrationRequest = buildBodyParams();
            return registerWatcherAsync(watcherRegistrationRequest, _callback);
        }
    }

    /**
     * RegisterWatcher
     * This method is used when installing crowdsec (cscli-&gt;APIL)
     * @param watcherRegistrationRequest Information about the watcher to be registered (required)
     * @return RegisterWatcherRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Watcher Created </td><td>  -  </td></tr>
     </table>
     */
    public RegisterWatcherRequestBuilder registerWatcher(String machineId, String password) throws IllegalArgumentException {
        if (machineId == null) throw new IllegalArgumentException("\"machineId\" is required but got null");
            

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            

        return new RegisterWatcherRequestBuilder(machineId, password);
    }
    private okhttp3.Call removeAlertsCall(String scope, String value, String scenario, String ip, String range, OffsetDateTime since, OffsetDateTime until, Boolean hasActiveDecision, String alertSource, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alerts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (scenario != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenario", scenario));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (hasActiveDecision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_active_decision", hasActiveDecision));
        }

        if (alertSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alert_source", alertSource));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTAuthorizer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeAlertsValidateBeforeCall(String scope, String value, String scenario, String ip, String range, OffsetDateTime since, OffsetDateTime until, Boolean hasActiveDecision, String alertSource, final ApiCallback _callback) throws ApiException {
        return removeAlertsCall(scope, value, scenario, ip, range, since, until, hasActiveDecision, alertSource, _callback);

    }


    private ApiResponse<DeleteAlertsResponse> removeAlertsWithHttpInfo(String scope, String value, String scenario, String ip, String range, OffsetDateTime since, OffsetDateTime until, Boolean hasActiveDecision, String alertSource) throws ApiException {
        okhttp3.Call localVarCall = removeAlertsValidateBeforeCall(scope, value, scenario, ip, range, since, until, hasActiveDecision, alertSource, null);
        Type localVarReturnType = new TypeToken<DeleteAlertsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeAlertsAsync(String scope, String value, String scenario, String ip, String range, OffsetDateTime since, OffsetDateTime until, Boolean hasActiveDecision, String alertSource, final ApiCallback<DeleteAlertsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeAlertsValidateBeforeCall(scope, value, scenario, ip, range, since, until, hasActiveDecision, alertSource, _callback);
        Type localVarReturnType = new TypeToken<DeleteAlertsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveAlertsRequestBuilder {
        private String scope;
        private String value;
        private String scenario;
        private String ip;
        private String range;
        private OffsetDateTime since;
        private OffsetDateTime until;
        private Boolean hasActiveDecision;
        private String alertSource;

        private RemoveAlertsRequestBuilder() {
        }

        /**
         * Set scope
         * @param scope delete alerts for this scope (optional)
         * @return RemoveAlertsRequestBuilder
         */
        public RemoveAlertsRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Set value
         * @param value delete alerts for this value (used with scope) (optional)
         * @return RemoveAlertsRequestBuilder
         */
        public RemoveAlertsRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set scenario
         * @param scenario delete alerts for this scenario (optional)
         * @return RemoveAlertsRequestBuilder
         */
        public RemoveAlertsRequestBuilder scenario(String scenario) {
            this.scenario = scenario;
            return this;
        }
        
        /**
         * Set ip
         * @param ip delete Alerts with IP (shorthand for scope&#x3D;ip&amp;value&#x3D;) (optional)
         * @return RemoveAlertsRequestBuilder
         */
        public RemoveAlertsRequestBuilder ip(String ip) {
            this.ip = ip;
            return this;
        }
        
        /**
         * Set range
         * @param range delete alerts concerned by range (shorthand for scope&#x3D;range&amp;value&#x3D;) (optional)
         * @return RemoveAlertsRequestBuilder
         */
        public RemoveAlertsRequestBuilder range(String range) {
            this.range = range;
            return this;
        }
        
        /**
         * Set since
         * @param since delete alerts added after YYYY-mm-DD-HH:MM:SS (optional)
         * @return RemoveAlertsRequestBuilder
         */
        public RemoveAlertsRequestBuilder since(OffsetDateTime since) {
            this.since = since;
            return this;
        }
        
        /**
         * Set until
         * @param until delete alerts added before YYYY-mm-DD-HH:MM:SS (optional)
         * @return RemoveAlertsRequestBuilder
         */
        public RemoveAlertsRequestBuilder until(OffsetDateTime until) {
            this.until = until;
            return this;
        }
        
        /**
         * Set hasActiveDecision
         * @param hasActiveDecision delete only alerts with decisions not expired yet (optional)
         * @return RemoveAlertsRequestBuilder
         */
        public RemoveAlertsRequestBuilder hasActiveDecision(Boolean hasActiveDecision) {
            this.hasActiveDecision = hasActiveDecision;
            return this;
        }
        
        /**
         * Set alertSource
         * @param alertSource delete only alerts with matching source (ie. cscli/crowdsec) (optional)
         * @return RemoveAlertsRequestBuilder
         */
        public RemoveAlertsRequestBuilder alertSource(String alertSource) {
            this.alertSource = alertSource;
            return this;
        }
        
        /**
         * Build call for removeAlerts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeAlertsCall(scope, value, scenario, ip, range, since, until, hasActiveDecision, alertSource, _callback);
        }


        /**
         * Execute removeAlerts request
         * @return DeleteAlertsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public DeleteAlertsResponse execute() throws ApiException {
            ApiResponse<DeleteAlertsResponse> localVarResp = removeAlertsWithHttpInfo(scope, value, scenario, ip, range, since, until, hasActiveDecision, alertSource);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeAlerts request with HTTP info returned
         * @return ApiResponse&lt;DeleteAlertsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteAlertsResponse> executeWithHttpInfo() throws ApiException {
            return removeAlertsWithHttpInfo(scope, value, scenario, ip, range, since, until, hasActiveDecision, alertSource);
        }

        /**
         * Execute removeAlerts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteAlertsResponse> _callback) throws ApiException {
            return removeAlertsAsync(scope, value, scenario, ip, range, since, until, hasActiveDecision, alertSource, _callback);
        }
    }

    /**
     * deleteAlerts
     * Allows to delete alerts
     * @return RemoveAlertsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RemoveAlertsRequestBuilder removeAlerts() throws IllegalArgumentException {
        return new RemoveAlertsRequestBuilder();
    }
    private okhttp3.Call removeDecisionByIdCall(String decisionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/decisions/{decision_id}"
            .replace("{" + "decision_id" + "}", localVarApiClient.escapeString(decisionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTAuthorizer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDecisionByIdValidateBeforeCall(String decisionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'decisionId' is set
        if (decisionId == null) {
            throw new ApiException("Missing the required parameter 'decisionId' when calling removeDecisionById(Async)");
        }

        return removeDecisionByIdCall(decisionId, _callback);

    }


    private ApiResponse<DeleteDecisionResponse> removeDecisionByIdWithHttpInfo(String decisionId) throws ApiException {
        okhttp3.Call localVarCall = removeDecisionByIdValidateBeforeCall(decisionId, null);
        Type localVarReturnType = new TypeToken<DeleteDecisionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeDecisionByIdAsync(String decisionId, final ApiCallback<DeleteDecisionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDecisionByIdValidateBeforeCall(decisionId, _callback);
        Type localVarReturnType = new TypeToken<DeleteDecisionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveDecisionByIdRequestBuilder {
        private final String decisionId;

        private RemoveDecisionByIdRequestBuilder(String decisionId) {
            this.decisionId = decisionId;
        }

        /**
         * Build call for removeDecisionById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeDecisionByIdCall(decisionId, _callback);
        }


        /**
         * Execute removeDecisionById request
         * @return DeleteDecisionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public DeleteDecisionResponse execute() throws ApiException {
            ApiResponse<DeleteDecisionResponse> localVarResp = removeDecisionByIdWithHttpInfo(decisionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeDecisionById request with HTTP info returned
         * @return ApiResponse&lt;DeleteDecisionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteDecisionResponse> executeWithHttpInfo() throws ApiException {
            return removeDecisionByIdWithHttpInfo(decisionId);
        }

        /**
         * Execute removeDecisionById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteDecisionResponse> _callback) throws ApiException {
            return removeDecisionByIdAsync(decisionId, _callback);
        }
    }

    /**
     * DeleteDecision
     * Delete decision for given decision ID (only from cscli)
     * @param decisionId  (required)
     * @return RemoveDecisionByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RemoveDecisionByIdRequestBuilder removeDecisionById(String decisionId) throws IllegalArgumentException {
        if (decisionId == null) throw new IllegalArgumentException("\"decisionId\" is required but got null");
            

        return new RemoveDecisionByIdRequestBuilder(decisionId);
    }
    private okhttp3.Call removeDecisionsCall(String scope, String value, String type, String ip, String range, String scenario, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/decisions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        if (scenario != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenario", scenario));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTAuthorizer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeDecisionsValidateBeforeCall(String scope, String value, String type, String ip, String range, String scenario, final ApiCallback _callback) throws ApiException {
        return removeDecisionsCall(scope, value, type, ip, range, scenario, _callback);

    }


    private ApiResponse<DeleteDecisionResponse> removeDecisionsWithHttpInfo(String scope, String value, String type, String ip, String range, String scenario) throws ApiException {
        okhttp3.Call localVarCall = removeDecisionsValidateBeforeCall(scope, value, type, ip, range, scenario, null);
        Type localVarReturnType = new TypeToken<DeleteDecisionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeDecisionsAsync(String scope, String value, String type, String ip, String range, String scenario, final ApiCallback<DeleteDecisionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeDecisionsValidateBeforeCall(scope, value, type, ip, range, scenario, _callback);
        Type localVarReturnType = new TypeToken<DeleteDecisionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveDecisionsRequestBuilder {
        private String scope;
        private String value;
        private String type;
        private String ip;
        private String range;
        private String scenario;

        private RemoveDecisionsRequestBuilder() {
        }

        /**
         * Set scope
         * @param scope scope to which the decision applies (ie. IP/Range/Username/Session/...) (optional)
         * @return RemoveDecisionsRequestBuilder
         */
        public RemoveDecisionsRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Set value
         * @param value the value to match for in the specified scope (optional)
         * @return RemoveDecisionsRequestBuilder
         */
        public RemoveDecisionsRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set type
         * @param type type of decision (optional)
         * @return RemoveDecisionsRequestBuilder
         */
        public RemoveDecisionsRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set ip
         * @param ip IP to search for (shorthand for scope&#x3D;ip&amp;value&#x3D;) (optional)
         * @return RemoveDecisionsRequestBuilder
         */
        public RemoveDecisionsRequestBuilder ip(String ip) {
            this.ip = ip;
            return this;
        }
        
        /**
         * Set range
         * @param range range to search for (shorthand for scope&#x3D;range&amp;value&#x3D;) (optional)
         * @return RemoveDecisionsRequestBuilder
         */
        public RemoveDecisionsRequestBuilder range(String range) {
            this.range = range;
            return this;
        }
        
        /**
         * Set scenario
         * @param scenario scenario to search (optional)
         * @return RemoveDecisionsRequestBuilder
         */
        public RemoveDecisionsRequestBuilder scenario(String scenario) {
            this.scenario = scenario;
            return this;
        }
        
        /**
         * Build call for removeDecisions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeDecisionsCall(scope, value, type, ip, range, scenario, _callback);
        }


        /**
         * Execute removeDecisions request
         * @return DeleteDecisionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public DeleteDecisionResponse execute() throws ApiException {
            ApiResponse<DeleteDecisionResponse> localVarResp = removeDecisionsWithHttpInfo(scope, value, type, ip, range, scenario);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeDecisions request with HTTP info returned
         * @return ApiResponse&lt;DeleteDecisionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeleteDecisionResponse> executeWithHttpInfo() throws ApiException {
            return removeDecisionsWithHttpInfo(scope, value, type, ip, range, scenario);
        }

        /**
         * Execute removeDecisions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeleteDecisionResponse> _callback) throws ApiException {
            return removeDecisionsAsync(scope, value, type, ip, range, scenario, _callback);
        }
    }

    /**
     * deleteDecisions
     * Delete decisions(s) for given filters (only from cscli)
     * @return RemoveDecisionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public RemoveDecisionsRequestBuilder removeDecisions() throws IllegalArgumentException {
        return new RemoveDecisionsRequestBuilder();
    }
    private okhttp3.Call searchAlertsCall(String scope, String value, String scenario, String ip, String range, OffsetDateTime since, OffsetDateTime until, Boolean simulated, Boolean hasActiveDecision, String decisionType, Double limit, String origin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alerts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (scenario != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenario", scenario));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        if (simulated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("simulated", simulated));
        }

        if (hasActiveDecision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_active_decision", hasActiveDecision));
        }

        if (decisionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decision_type", decisionType));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (origin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin", origin));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "JWTAuthorizer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAlertsValidateBeforeCall(String scope, String value, String scenario, String ip, String range, OffsetDateTime since, OffsetDateTime until, Boolean simulated, Boolean hasActiveDecision, String decisionType, Double limit, String origin, final ApiCallback _callback) throws ApiException {
        return searchAlertsCall(scope, value, scenario, ip, range, since, until, simulated, hasActiveDecision, decisionType, limit, origin, _callback);

    }


    private ApiResponse<Void> searchAlertsWithHttpInfo(String scope, String value, String scenario, String ip, String range, OffsetDateTime since, OffsetDateTime until, Boolean simulated, Boolean hasActiveDecision, String decisionType, Double limit, String origin) throws ApiException {
        okhttp3.Call localVarCall = searchAlertsValidateBeforeCall(scope, value, scenario, ip, range, since, until, simulated, hasActiveDecision, decisionType, limit, origin, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call searchAlertsAsync(String scope, String value, String scenario, String ip, String range, OffsetDateTime since, OffsetDateTime until, Boolean simulated, Boolean hasActiveDecision, String decisionType, Double limit, String origin, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAlertsValidateBeforeCall(scope, value, scenario, ip, range, since, until, simulated, hasActiveDecision, decisionType, limit, origin, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SearchAlertsRequestBuilder {
        private String scope;
        private String value;
        private String scenario;
        private String ip;
        private String range;
        private OffsetDateTime since;
        private OffsetDateTime until;
        private Boolean simulated;
        private Boolean hasActiveDecision;
        private String decisionType;
        private Double limit;
        private String origin;

        private SearchAlertsRequestBuilder() {
        }

        /**
         * Set scope
         * @param scope show alerts for this scope (optional)
         * @return SearchAlertsRequestBuilder
         */
        public SearchAlertsRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Set value
         * @param value show alerts for this value (used with scope) (optional)
         * @return SearchAlertsRequestBuilder
         */
        public SearchAlertsRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set scenario
         * @param scenario show alerts for this scenario (optional)
         * @return SearchAlertsRequestBuilder
         */
        public SearchAlertsRequestBuilder scenario(String scenario) {
            this.scenario = scenario;
            return this;
        }
        
        /**
         * Set ip
         * @param ip IP to search for (shorthand for scope&#x3D;ip&amp;value&#x3D;) (optional)
         * @return SearchAlertsRequestBuilder
         */
        public SearchAlertsRequestBuilder ip(String ip) {
            this.ip = ip;
            return this;
        }
        
        /**
         * Set range
         * @param range range to search for (shorthand for scope&#x3D;range&amp;value&#x3D;) (optional)
         * @return SearchAlertsRequestBuilder
         */
        public SearchAlertsRequestBuilder range(String range) {
            this.range = range;
            return this;
        }
        
        /**
         * Set since
         * @param since search alerts newer than delay (format must be compatible with time.ParseDuration) (optional)
         * @return SearchAlertsRequestBuilder
         */
        public SearchAlertsRequestBuilder since(OffsetDateTime since) {
            this.since = since;
            return this;
        }
        
        /**
         * Set until
         * @param until search alerts older than delay (format must be compatible with time.ParseDuration) (optional)
         * @return SearchAlertsRequestBuilder
         */
        public SearchAlertsRequestBuilder until(OffsetDateTime until) {
            this.until = until;
            return this;
        }
        
        /**
         * Set simulated
         * @param simulated if set to true, decisions in simulation mode will be returned as well (optional)
         * @return SearchAlertsRequestBuilder
         */
        public SearchAlertsRequestBuilder simulated(Boolean simulated) {
            this.simulated = simulated;
            return this;
        }
        
        /**
         * Set hasActiveDecision
         * @param hasActiveDecision only return alerts with decisions not expired yet (optional)
         * @return SearchAlertsRequestBuilder
         */
        public SearchAlertsRequestBuilder hasActiveDecision(Boolean hasActiveDecision) {
            this.hasActiveDecision = hasActiveDecision;
            return this;
        }
        
        /**
         * Set decisionType
         * @param decisionType restrict results to alerts with decisions matching given type (optional)
         * @return SearchAlertsRequestBuilder
         */
        public SearchAlertsRequestBuilder decisionType(String decisionType) {
            this.decisionType = decisionType;
            return this;
        }
        
        /**
         * Set limit
         * @param limit number of alerts to return (optional)
         * @return SearchAlertsRequestBuilder
         */
        public SearchAlertsRequestBuilder limit(Double limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set origin
         * @param origin restrict results to this origin (ie. lists,CAPI,cscli) (optional)
         * @return SearchAlertsRequestBuilder
         */
        public SearchAlertsRequestBuilder origin(String origin) {
            this.origin = origin;
            return this;
        }
        
        /**
         * Build call for searchAlerts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchAlertsCall(scope, value, scenario, ip, range, since, until, simulated, hasActiveDecision, decisionType, limit, origin, _callback);
        }


        /**
         * Execute searchAlerts request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            searchAlertsWithHttpInfo(scope, value, scenario, ip, range, since, until, simulated, hasActiveDecision, decisionType, limit, origin);
        }

        /**
         * Execute searchAlerts request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return searchAlertsWithHttpInfo(scope, value, scenario, ip, range, since, until, simulated, hasActiveDecision, decisionType, limit, origin);
        }

        /**
         * Execute searchAlerts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return searchAlertsAsync(scope, value, scenario, ip, range, since, until, simulated, hasActiveDecision, decisionType, limit, origin, _callback);
        }
    }

    /**
     * searchAlerts
     * Allows to search for alerts
     * @return SearchAlertsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
     </table>
     */
    public SearchAlertsRequestBuilder searchAlerts() throws IllegalArgumentException {
        return new SearchAlertsRequestBuilder();
    }
}
