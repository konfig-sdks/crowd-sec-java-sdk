/*
 * Swagger CrowdSec
 * CrowdSec local API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@crowdsec.net
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Alert;
import com.konfigthis.client.model.DeleteAlertsResponse;
import com.konfigthis.client.model.DeleteDecisionResponse;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.WatcherAuthRequest;
import com.konfigthis.client.model.WatcherAuthResponse;
import com.konfigthis.client.model.WatcherRegistrationRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WatchersApi
 */
@Disabled
public class WatchersApiTest {

    private static WatchersApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new WatchersApi(apiClient);
    }

    /**
     * AuthenticateWatcher
     *
     * Authenticate current to get session ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authenticateSessionTest() throws ApiException {
        String machineId = null;
        String password = null;
        List<String> scenarios = null;
        WatcherAuthResponse response = api.authenticateSession(machineId, password)
                .scenarios(scenarios)
                .execute();
        // TODO: test validations
    }

    /**
     * pushAlerts
     *
     * Push alerts to API
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAlertsTest() throws ApiException {
        List<String> response = api.createAlerts()
                .execute();
        // TODO: test validations
    }

    /**
     * DeleteAlert
     *
     * Delete alert for given alert ID (only from cscli)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAlertByIdTest() throws ApiException {
        String alertId = null;
        DeleteAlertsResponse response = api.deleteAlertById(alertId)
                .execute();
        // TODO: test validations
    }

    /**
     * GetAlertByID
     *
     * Get alert by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlertByIdTest() throws ApiException {
        String alertId = null;
        Alert response = api.getAlertById(alertId)
                .execute();
        // TODO: test validations
    }

    /**
     * GetAlertByID
     *
     * Get alert by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAlertById_0Test() throws ApiException {
        String alertId = null;
        api.getAlertById_0(alertId)
                .execute();
        // TODO: test validations
    }

    /**
     * searchAlerts
     *
     * Allows to search for alerts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAlertsTest() throws ApiException {
        String scope = null;
        String value = null;
        String scenario = null;
        String ip = null;
        String range = null;
        OffsetDateTime since = null;
        OffsetDateTime until = null;
        Boolean simulated = null;
        Boolean hasActiveDecision = null;
        String decisionType = null;
        Double limit = null;
        String origin = null;
        List<Alert> response = api.listAlerts()
                .scope(scope)
                .value(value)
                .scenario(scenario)
                .ip(ip)
                .range(range)
                .since(since)
                .until(until)
                .simulated(simulated)
                .hasActiveDecision(hasActiveDecision)
                .decisionType(decisionType)
                .limit(limit)
                .origin(origin)
                .execute();
        // TODO: test validations
    }

    /**
     * RegisterWatcher
     *
     * This method is used when installing crowdsec (cscli-&gt;APIL)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerWatcherTest() throws ApiException {
        String machineId = null;
        String password = null;
        api.registerWatcher(machineId, password)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteAlerts
     *
     * Allows to delete alerts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAlertsTest() throws ApiException {
        String scope = null;
        String value = null;
        String scenario = null;
        String ip = null;
        String range = null;
        OffsetDateTime since = null;
        OffsetDateTime until = null;
        Boolean hasActiveDecision = null;
        String alertSource = null;
        DeleteAlertsResponse response = api.removeAlerts()
                .scope(scope)
                .value(value)
                .scenario(scenario)
                .ip(ip)
                .range(range)
                .since(since)
                .until(until)
                .hasActiveDecision(hasActiveDecision)
                .alertSource(alertSource)
                .execute();
        // TODO: test validations
    }

    /**
     * DeleteDecision
     *
     * Delete decision for given decision ID (only from cscli)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeDecisionByIdTest() throws ApiException {
        String decisionId = null;
        DeleteDecisionResponse response = api.removeDecisionById(decisionId)
                .execute();
        // TODO: test validations
    }

    /**
     * deleteDecisions
     *
     * Delete decisions(s) for given filters (only from cscli)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeDecisionsTest() throws ApiException {
        String scope = null;
        String value = null;
        String type = null;
        String ip = null;
        String range = null;
        String scenario = null;
        DeleteDecisionResponse response = api.removeDecisions()
                .scope(scope)
                .value(value)
                .type(type)
                .ip(ip)
                .range(range)
                .scenario(scenario)
                .execute();
        // TODO: test validations
    }

    /**
     * searchAlerts
     *
     * Allows to search for alerts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchAlertsTest() throws ApiException {
        String scope = null;
        String value = null;
        String scenario = null;
        String ip = null;
        String range = null;
        OffsetDateTime since = null;
        OffsetDateTime until = null;
        Boolean simulated = null;
        Boolean hasActiveDecision = null;
        String decisionType = null;
        Double limit = null;
        String origin = null;
        api.searchAlerts()
                .scope(scope)
                .value(value)
                .scenario(scenario)
                .ip(ip)
                .range(range)
                .since(since)
                .until(until)
                .simulated(simulated)
                .hasActiveDecision(hasActiveDecision)
                .decisionType(decisionType)
                .limit(limit)
                .origin(origin)
                .execute();
        // TODO: test validations
    }

}
