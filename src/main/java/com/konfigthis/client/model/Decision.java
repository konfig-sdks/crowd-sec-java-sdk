/*
 * Swagger CrowdSec
 * CrowdSec local API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@crowdsec.net
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Decision
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Decision {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_UNTIL = "until";
  @SerializedName(SERIALIZED_NAME_UNTIL)
  private String until;

  public static final String SERIALIZED_NAME_SCENARIO = "scenario";
  @SerializedName(SERIALIZED_NAME_SCENARIO)
  private String scenario;

  public static final String SERIALIZED_NAME_SIMULATED = "simulated";
  @SerializedName(SERIALIZED_NAME_SIMULATED)
  private Boolean simulated;

  public Decision() {
  }

  
  public Decision(
     Integer id, 
     String uuid, 
     Boolean simulated
  ) {
    this();
    this.id = id;
    this.uuid = uuid;
    this.simulated = simulated;
  }

   /**
   * (only relevant for GET ops) the unique id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "(only relevant for GET ops) the unique id")

  public Integer getId() {
    return id;
  }




   /**
   * only relevant for LAPI-&gt;CAPI, ignored for cscli-&gt;LAPI and crowdsec-&gt;LAPI
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "only relevant for LAPI->CAPI, ignored for cscli->LAPI and crowdsec->LAPI")

  public String getUuid() {
    return uuid;
  }




  public Decision origin(String origin) {
    
    
    
    
    this.origin = origin;
    return this;
  }

   /**
   * the origin of the decision : cscli, crowdsec
   * @return origin
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "the origin of the decision : cscli, crowdsec")

  public String getOrigin() {
    return origin;
  }


  public void setOrigin(String origin) {
    
    
    
    this.origin = origin;
  }


  public Decision type(String type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * the type of decision, might be &#39;ban&#39;, &#39;captcha&#39; or something custom. Ignored when watcher (cscli/crowdsec) is pushing to APIL.
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "the type of decision, might be 'ban', 'captcha' or something custom. Ignored when watcher (cscli/crowdsec) is pushing to APIL.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    
    this.type = type;
  }


  public Decision scope(String scope) {
    
    
    
    
    this.scope = scope;
    return this;
  }

   /**
   * the scope of decision : does it apply to an IP, a range, a username, etc
   * @return scope
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "the scope of decision : does it apply to an IP, a range, a username, etc")

  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    
    
    
    this.scope = scope;
  }


  public Decision value(String value) {
    
    
    
    
    this.value = value;
    return this;
  }

   /**
   * the value of the decision scope : an IP, a range, a username, etc
   * @return value
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "the value of the decision scope : an IP, a range, a username, etc")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    
    
    
    this.value = value;
  }


  public Decision duration(String duration) {
    
    
    
    
    this.duration = duration;
    return this;
  }

   /**
   * the duration of the decisions
   * @return duration
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "the duration of the decisions")

  public String getDuration() {
    return duration;
  }


  public void setDuration(String duration) {
    
    
    
    this.duration = duration;
  }


  public Decision until(String until) {
    
    
    
    
    this.until = until;
    return this;
  }

   /**
   * the date until the decisions must be active
   * @return until
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the date until the decisions must be active")

  public String getUntil() {
    return until;
  }


  public void setUntil(String until) {
    
    
    
    this.until = until;
  }


  public Decision scenario(String scenario) {
    
    
    
    
    this.scenario = scenario;
    return this;
  }

   /**
   * Get scenario
   * @return scenario
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getScenario() {
    return scenario;
  }


  public void setScenario(String scenario) {
    
    
    
    this.scenario = scenario;
  }


   /**
   * true if the decision result from a scenario in simulation mode
   * @return simulated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "true if the decision result from a scenario in simulation mode")

  public Boolean getSimulated() {
    return simulated;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Decision instance itself
   */
  public Decision putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Decision decision = (Decision) o;
    return Objects.equals(this.id, decision.id) &&
        Objects.equals(this.uuid, decision.uuid) &&
        Objects.equals(this.origin, decision.origin) &&
        Objects.equals(this.type, decision.type) &&
        Objects.equals(this.scope, decision.scope) &&
        Objects.equals(this.value, decision.value) &&
        Objects.equals(this.duration, decision.duration) &&
        Objects.equals(this.until, decision.until) &&
        Objects.equals(this.scenario, decision.scenario) &&
        Objects.equals(this.simulated, decision.simulated)&&
        Objects.equals(this.additionalProperties, decision.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, uuid, origin, type, scope, value, duration, until, scenario, simulated, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Decision {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    until: ").append(toIndentedString(until)).append("\n");
    sb.append("    scenario: ").append(toIndentedString(scenario)).append("\n");
    sb.append("    simulated: ").append(toIndentedString(simulated)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("uuid");
    openapiFields.add("origin");
    openapiFields.add("type");
    openapiFields.add("scope");
    openapiFields.add("value");
    openapiFields.add("duration");
    openapiFields.add("until");
    openapiFields.add("scenario");
    openapiFields.add("simulated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("origin");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("value");
    openapiRequiredFields.add("duration");
    openapiRequiredFields.add("scenario");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Decision
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Decision.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Decision is not found in the empty JSON string", Decision.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Decision.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if (!jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if (!jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      if (!jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if ((jsonObj.get("until") != null && !jsonObj.get("until").isJsonNull()) && !jsonObj.get("until").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `until` to be a primitive type in the JSON string but got `%s`", jsonObj.get("until").toString()));
      }
      if (!jsonObj.get("scenario").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scenario` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scenario").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Decision.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Decision' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Decision> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Decision.class));

       return (TypeAdapter<T>) new TypeAdapter<Decision>() {
           @Override
           public void write(JsonWriter out, Decision value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Decision read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Decision instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Decision given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Decision
  * @throws IOException if the JSON string is invalid with respect to Decision
  */
  public static Decision fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Decision.class);
  }

 /**
  * Convert an instance of Decision to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

