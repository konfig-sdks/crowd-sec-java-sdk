/*
 * Swagger CrowdSec
 * CrowdSec local API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@crowdsec.net
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Source
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Source {
  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_RANGE = "range";
  @SerializedName(SERIALIZED_NAME_RANGE)
  private String range;

  public static final String SERIALIZED_NAME_AS_NUMBER = "as_number";
  @SerializedName(SERIALIZED_NAME_AS_NUMBER)
  private String asNumber;

  public static final String SERIALIZED_NAME_AS_NAME = "as_name";
  @SerializedName(SERIALIZED_NAME_AS_NAME)
  private String asName;

  public static final String SERIALIZED_NAME_CN = "cn";
  @SerializedName(SERIALIZED_NAME_CN)
  private String cn;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Float latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Float longitude;

  public Source() {
  }

  public Source scope(String scope) {
    
    
    
    
    this.scope = scope;
    return this;
  }

   /**
   * the scope of a source : ip,range,username,etc
   * @return scope
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "the scope of a source : ip,range,username,etc")

  public String getScope() {
    return scope;
  }


  public void setScope(String scope) {
    
    
    
    this.scope = scope;
  }


  public Source value(String value) {
    
    
    
    
    this.value = value;
    return this;
  }

   /**
   * the value of a source : the ip, the range, the username,etc
   * @return value
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "the value of a source : the ip, the range, the username,etc")

  public String getValue() {
    return value;
  }


  public void setValue(String value) {
    
    
    
    this.value = value;
  }


  public Source ip(String ip) {
    
    
    
    
    this.ip = ip;
    return this;
  }

   /**
   * provided as a convenience when the source is an IP
   * @return ip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "provided as a convenience when the source is an IP")

  public String getIp() {
    return ip;
  }


  public void setIp(String ip) {
    
    
    
    this.ip = ip;
  }


  public Source range(String range) {
    
    
    
    
    this.range = range;
    return this;
  }

   /**
   * provided as a convenience when the source is an IP
   * @return range
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "provided as a convenience when the source is an IP")

  public String getRange() {
    return range;
  }


  public void setRange(String range) {
    
    
    
    this.range = range;
  }


  public Source asNumber(String asNumber) {
    
    
    
    
    this.asNumber = asNumber;
    return this;
  }

   /**
   * provided as a convenience when the source is an IP
   * @return asNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "provided as a convenience when the source is an IP")

  public String getAsNumber() {
    return asNumber;
  }


  public void setAsNumber(String asNumber) {
    
    
    
    this.asNumber = asNumber;
  }


  public Source asName(String asName) {
    
    
    
    
    this.asName = asName;
    return this;
  }

   /**
   * provided as a convenience when the source is an IP
   * @return asName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "provided as a convenience when the source is an IP")

  public String getAsName() {
    return asName;
  }


  public void setAsName(String asName) {
    
    
    
    this.asName = asName;
  }


  public Source cn(String cn) {
    
    
    
    
    this.cn = cn;
    return this;
  }

   /**
   * Get cn
   * @return cn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCn() {
    return cn;
  }


  public void setCn(String cn) {
    
    
    
    this.cn = cn;
  }


  public Source latitude(Float latitude) {
    
    
    
    
    this.latitude = latitude;
    return this;
  }

   /**
   * Get latitude
   * @return latitude
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getLatitude() {
    return latitude;
  }


  public void setLatitude(Float latitude) {
    
    
    
    this.latitude = latitude;
  }


  public Source longitude(Float longitude) {
    
    
    
    
    this.longitude = longitude;
    return this;
  }

   /**
   * Get longitude
   * @return longitude
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getLongitude() {
    return longitude;
  }


  public void setLongitude(Float longitude) {
    
    
    
    this.longitude = longitude;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Source instance itself
   */
  public Source putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Source source = (Source) o;
    return Objects.equals(this.scope, source.scope) &&
        Objects.equals(this.value, source.value) &&
        Objects.equals(this.ip, source.ip) &&
        Objects.equals(this.range, source.range) &&
        Objects.equals(this.asNumber, source.asNumber) &&
        Objects.equals(this.asName, source.asName) &&
        Objects.equals(this.cn, source.cn) &&
        Objects.equals(this.latitude, source.latitude) &&
        Objects.equals(this.longitude, source.longitude)&&
        Objects.equals(this.additionalProperties, source.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scope, value, ip, range, asNumber, asName, cn, latitude, longitude, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Source {\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    range: ").append(toIndentedString(range)).append("\n");
    sb.append("    asNumber: ").append(toIndentedString(asNumber)).append("\n");
    sb.append("    asName: ").append(toIndentedString(asName)).append("\n");
    sb.append("    cn: ").append(toIndentedString(cn)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("scope");
    openapiFields.add("value");
    openapiFields.add("ip");
    openapiFields.add("range");
    openapiFields.add("as_number");
    openapiFields.add("as_name");
    openapiFields.add("cn");
    openapiFields.add("latitude");
    openapiFields.add("longitude");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("value");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Source
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Source.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Source is not found in the empty JSON string", Source.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Source.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if (!jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("range") != null && !jsonObj.get("range").isJsonNull()) && !jsonObj.get("range").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `range` to be a primitive type in the JSON string but got `%s`", jsonObj.get("range").toString()));
      }
      if ((jsonObj.get("as_number") != null && !jsonObj.get("as_number").isJsonNull()) && !jsonObj.get("as_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `as_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("as_number").toString()));
      }
      if ((jsonObj.get("as_name") != null && !jsonObj.get("as_name").isJsonNull()) && !jsonObj.get("as_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `as_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("as_name").toString()));
      }
      if ((jsonObj.get("cn") != null && !jsonObj.get("cn").isJsonNull()) && !jsonObj.get("cn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Source.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Source' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Source> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Source.class));

       return (TypeAdapter<T>) new TypeAdapter<Source>() {
           @Override
           public void write(JsonWriter out, Source value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Source read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Source instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Source given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Source
  * @throws IOException if the JSON string is invalid with respect to Source
  */
  public static Source fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Source.class);
  }

 /**
  * Convert an instance of Source to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

