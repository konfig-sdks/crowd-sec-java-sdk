/*
 * Swagger CrowdSec
 * CrowdSec local API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@crowdsec.net
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Decision;
import com.konfigthis.client.model.Event;
import com.konfigthis.client.model.MetaInner;
import com.konfigthis.client.model.Source;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Alert
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Alert {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_UUID = "uuid";
  @SerializedName(SERIALIZED_NAME_UUID)
  private String uuid;

  public static final String SERIALIZED_NAME_MACHINE_ID = "machine_id";
  @SerializedName(SERIALIZED_NAME_MACHINE_ID)
  private String machineId;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_SCENARIO = "scenario";
  @SerializedName(SERIALIZED_NAME_SCENARIO)
  private String scenario;

  public static final String SERIALIZED_NAME_SCENARIO_HASH = "scenario_hash";
  @SerializedName(SERIALIZED_NAME_SCENARIO_HASH)
  private String scenarioHash;

  public static final String SERIALIZED_NAME_SCENARIO_VERSION = "scenario_version";
  @SerializedName(SERIALIZED_NAME_SCENARIO_VERSION)
  private String scenarioVersion;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_EVENTS_COUNT = "events_count";
  @SerializedName(SERIALIZED_NAME_EVENTS_COUNT)
  private Integer eventsCount;

  public static final String SERIALIZED_NAME_START_AT = "start_at";
  @SerializedName(SERIALIZED_NAME_START_AT)
  private String startAt;

  public static final String SERIALIZED_NAME_STOP_AT = "stop_at";
  @SerializedName(SERIALIZED_NAME_STOP_AT)
  private String stopAt;

  public static final String SERIALIZED_NAME_CAPACITY = "capacity";
  @SerializedName(SERIALIZED_NAME_CAPACITY)
  private Integer capacity;

  public static final String SERIALIZED_NAME_LEAKSPEED = "leakspeed";
  @SerializedName(SERIALIZED_NAME_LEAKSPEED)
  private String leakspeed;

  public static final String SERIALIZED_NAME_SIMULATED = "simulated";
  @SerializedName(SERIALIZED_NAME_SIMULATED)
  private Boolean simulated;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<Event> events = new ArrayList<>();

  public static final String SERIALIZED_NAME_REMEDIATION = "remediation";
  @SerializedName(SERIALIZED_NAME_REMEDIATION)
  private Boolean remediation;

  public static final String SERIALIZED_NAME_DECISIONS = "decisions";
  @SerializedName(SERIALIZED_NAME_DECISIONS)
  private List<Decision> decisions = null;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private Source source;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private List<MetaInner> meta = null;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = null;

  public Alert() {
  }

  
  public Alert(
     Integer id, 
     String uuid, 
     String machineId, 
     String createdAt
  ) {
    this();
    this.id = id;
    this.uuid = uuid;
    this.machineId = machineId;
    this.createdAt = createdAt;
  }

   /**
   * only relevant for GET, ignored in POST requests
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "only relevant for GET, ignored in POST requests")

  public Integer getId() {
    return id;
  }




   /**
   * only relevant for LAPI-&gt;CAPI, ignored for cscli-&gt;LAPI and crowdsec-&gt;LAPI
   * @return uuid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "only relevant for LAPI->CAPI, ignored for cscli->LAPI and crowdsec->LAPI")

  public String getUuid() {
    return uuid;
  }




   /**
   * only relevant for LAPI-&gt;CAPI, ignored for cscli-&gt;LAPI and crowdsec-&gt;LAPI
   * @return machineId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "only relevant for LAPI->CAPI, ignored for cscli->LAPI and crowdsec->LAPI")

  public String getMachineId() {
    return machineId;
  }




   /**
   * only relevant for GET, ignored in POST requests
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "only relevant for GET, ignored in POST requests")

  public String getCreatedAt() {
    return createdAt;
  }




  public Alert scenario(String scenario) {
    
    
    
    
    this.scenario = scenario;
    return this;
  }

   /**
   * Get scenario
   * @return scenario
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getScenario() {
    return scenario;
  }


  public void setScenario(String scenario) {
    
    
    
    this.scenario = scenario;
  }


  public Alert scenarioHash(String scenarioHash) {
    
    
    
    
    this.scenarioHash = scenarioHash;
    return this;
  }

   /**
   * Get scenarioHash
   * @return scenarioHash
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getScenarioHash() {
    return scenarioHash;
  }


  public void setScenarioHash(String scenarioHash) {
    
    
    
    this.scenarioHash = scenarioHash;
  }


  public Alert scenarioVersion(String scenarioVersion) {
    
    
    
    
    this.scenarioVersion = scenarioVersion;
    return this;
  }

   /**
   * Get scenarioVersion
   * @return scenarioVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getScenarioVersion() {
    return scenarioVersion;
  }


  public void setScenarioVersion(String scenarioVersion) {
    
    
    
    this.scenarioVersion = scenarioVersion;
  }


  public Alert message(String message) {
    
    
    
    
    this.message = message;
    return this;
  }

   /**
   * a human readable message
   * @return message
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "a human readable message")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    
    
    
    this.message = message;
  }


  public Alert eventsCount(Integer eventsCount) {
    
    
    
    
    this.eventsCount = eventsCount;
    return this;
  }

   /**
   * Get eventsCount
   * @return eventsCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getEventsCount() {
    return eventsCount;
  }


  public void setEventsCount(Integer eventsCount) {
    
    
    
    this.eventsCount = eventsCount;
  }


  public Alert startAt(String startAt) {
    
    
    
    
    this.startAt = startAt;
    return this;
  }

   /**
   * Get startAt
   * @return startAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getStartAt() {
    return startAt;
  }


  public void setStartAt(String startAt) {
    
    
    
    this.startAt = startAt;
  }


  public Alert stopAt(String stopAt) {
    
    
    
    
    this.stopAt = stopAt;
    return this;
  }

   /**
   * Get stopAt
   * @return stopAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getStopAt() {
    return stopAt;
  }


  public void setStopAt(String stopAt) {
    
    
    
    this.stopAt = stopAt;
  }


  public Alert capacity(Integer capacity) {
    
    
    
    
    this.capacity = capacity;
    return this;
  }

   /**
   * Get capacity
   * @return capacity
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getCapacity() {
    return capacity;
  }


  public void setCapacity(Integer capacity) {
    
    
    
    this.capacity = capacity;
  }


  public Alert leakspeed(String leakspeed) {
    
    
    
    
    this.leakspeed = leakspeed;
    return this;
  }

   /**
   * Get leakspeed
   * @return leakspeed
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getLeakspeed() {
    return leakspeed;
  }


  public void setLeakspeed(String leakspeed) {
    
    
    
    this.leakspeed = leakspeed;
  }


  public Alert simulated(Boolean simulated) {
    
    
    
    
    this.simulated = simulated;
    return this;
  }

   /**
   * Get simulated
   * @return simulated
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getSimulated() {
    return simulated;
  }


  public void setSimulated(Boolean simulated) {
    
    
    
    this.simulated = simulated;
  }


  public Alert events(List<Event> events) {
    
    
    
    
    this.events = events;
    return this;
  }

  public Alert addEventsItem(Event eventsItem) {
    this.events.add(eventsItem);
    return this;
  }

   /**
   * the Meta of the events leading to overflow
   * @return events
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "the Meta of the events leading to overflow")

  public List<Event> getEvents() {
    return events;
  }


  public void setEvents(List<Event> events) {
    
    
    
    this.events = events;
  }


  public Alert remediation(Boolean remediation) {
    
    
    
    
    this.remediation = remediation;
    return this;
  }

   /**
   * Get remediation
   * @return remediation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getRemediation() {
    return remediation;
  }


  public void setRemediation(Boolean remediation) {
    
    
    
    this.remediation = remediation;
  }


  public Alert decisions(List<Decision> decisions) {
    
    
    
    
    this.decisions = decisions;
    return this;
  }

  public Alert addDecisionsItem(Decision decisionsItem) {
    if (this.decisions == null) {
      this.decisions = new ArrayList<>();
    }
    this.decisions.add(decisionsItem);
    return this;
  }

   /**
   * Get decisions
   * @return decisions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Decision> getDecisions() {
    return decisions;
  }


  public void setDecisions(List<Decision> decisions) {
    
    
    
    this.decisions = decisions;
  }


  public Alert source(Source source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Source getSource() {
    return source;
  }


  public void setSource(Source source) {
    
    
    
    this.source = source;
  }


  public Alert meta(List<MetaInner> meta) {
    
    
    
    
    this.meta = meta;
    return this;
  }

  public Alert addMetaItem(MetaInner metaItem) {
    if (this.meta == null) {
      this.meta = new ArrayList<>();
    }
    this.meta.add(metaItem);
    return this;
  }

   /**
   * the Meta data of the Alert itself
   * @return meta
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the Meta data of the Alert itself")

  public List<MetaInner> getMeta() {
    return meta;
  }


  public void setMeta(List<MetaInner> meta) {
    
    
    
    this.meta = meta;
  }


  public Alert labels(List<String> labels) {
    
    
    
    
    this.labels = labels;
    return this;
  }

  public Alert addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getLabels() {
    return labels;
  }


  public void setLabels(List<String> labels) {
    
    
    
    this.labels = labels;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Alert instance itself
   */
  public Alert putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Alert alert = (Alert) o;
    return Objects.equals(this.id, alert.id) &&
        Objects.equals(this.uuid, alert.uuid) &&
        Objects.equals(this.machineId, alert.machineId) &&
        Objects.equals(this.createdAt, alert.createdAt) &&
        Objects.equals(this.scenario, alert.scenario) &&
        Objects.equals(this.scenarioHash, alert.scenarioHash) &&
        Objects.equals(this.scenarioVersion, alert.scenarioVersion) &&
        Objects.equals(this.message, alert.message) &&
        Objects.equals(this.eventsCount, alert.eventsCount) &&
        Objects.equals(this.startAt, alert.startAt) &&
        Objects.equals(this.stopAt, alert.stopAt) &&
        Objects.equals(this.capacity, alert.capacity) &&
        Objects.equals(this.leakspeed, alert.leakspeed) &&
        Objects.equals(this.simulated, alert.simulated) &&
        Objects.equals(this.events, alert.events) &&
        Objects.equals(this.remediation, alert.remediation) &&
        Objects.equals(this.decisions, alert.decisions) &&
        Objects.equals(this.source, alert.source) &&
        Objects.equals(this.meta, alert.meta) &&
        Objects.equals(this.labels, alert.labels)&&
        Objects.equals(this.additionalProperties, alert.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, uuid, machineId, createdAt, scenario, scenarioHash, scenarioVersion, message, eventsCount, startAt, stopAt, capacity, leakspeed, simulated, events, remediation, decisions, source, meta, labels, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Alert {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    machineId: ").append(toIndentedString(machineId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    scenario: ").append(toIndentedString(scenario)).append("\n");
    sb.append("    scenarioHash: ").append(toIndentedString(scenarioHash)).append("\n");
    sb.append("    scenarioVersion: ").append(toIndentedString(scenarioVersion)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    eventsCount: ").append(toIndentedString(eventsCount)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    stopAt: ").append(toIndentedString(stopAt)).append("\n");
    sb.append("    capacity: ").append(toIndentedString(capacity)).append("\n");
    sb.append("    leakspeed: ").append(toIndentedString(leakspeed)).append("\n");
    sb.append("    simulated: ").append(toIndentedString(simulated)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    remediation: ").append(toIndentedString(remediation)).append("\n");
    sb.append("    decisions: ").append(toIndentedString(decisions)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("uuid");
    openapiFields.add("machine_id");
    openapiFields.add("created_at");
    openapiFields.add("scenario");
    openapiFields.add("scenario_hash");
    openapiFields.add("scenario_version");
    openapiFields.add("message");
    openapiFields.add("events_count");
    openapiFields.add("start_at");
    openapiFields.add("stop_at");
    openapiFields.add("capacity");
    openapiFields.add("leakspeed");
    openapiFields.add("simulated");
    openapiFields.add("events");
    openapiFields.add("remediation");
    openapiFields.add("decisions");
    openapiFields.add("source");
    openapiFields.add("meta");
    openapiFields.add("labels");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("scenario");
    openapiRequiredFields.add("scenario_hash");
    openapiRequiredFields.add("scenario_version");
    openapiRequiredFields.add("message");
    openapiRequiredFields.add("events_count");
    openapiRequiredFields.add("start_at");
    openapiRequiredFields.add("stop_at");
    openapiRequiredFields.add("capacity");
    openapiRequiredFields.add("leakspeed");
    openapiRequiredFields.add("simulated");
    openapiRequiredFields.add("events");
    openapiRequiredFields.add("source");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Alert
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Alert.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Alert is not found in the empty JSON string", Alert.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Alert.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("uuid") != null && !jsonObj.get("uuid").isJsonNull()) && !jsonObj.get("uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uuid").toString()));
      }
      if ((jsonObj.get("machine_id") != null && !jsonObj.get("machine_id").isJsonNull()) && !jsonObj.get("machine_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machine_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machine_id").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if (!jsonObj.get("scenario").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scenario` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scenario").toString()));
      }
      if (!jsonObj.get("scenario_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scenario_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scenario_hash").toString()));
      }
      if (!jsonObj.get("scenario_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scenario_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scenario_version").toString()));
      }
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (!jsonObj.get("start_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_at").toString()));
      }
      if (!jsonObj.get("stop_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stop_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stop_at").toString()));
      }
      if (!jsonObj.get("leakspeed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leakspeed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leakspeed").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("events").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
      }

      JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
      // validate the required field `events` (array)
      for (int i = 0; i < jsonArrayevents.size(); i++) {
        Event.validateJsonObject(jsonArrayevents.get(i).getAsJsonObject());
      };
      if (jsonObj.get("decisions") != null && !jsonObj.get("decisions").isJsonNull()) {
        JsonArray jsonArraydecisions = jsonObj.getAsJsonArray("decisions");
        if (jsonArraydecisions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("decisions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `decisions` to be an array in the JSON string but got `%s`", jsonObj.get("decisions").toString()));
          }

          // validate the optional field `decisions` (array)
          for (int i = 0; i < jsonArraydecisions.size(); i++) {
            Decision.validateJsonObject(jsonArraydecisions.get(i).getAsJsonObject());
          };
        }
      }
      // validate the required field `source`
      Source.validateJsonObject(jsonObj.getAsJsonObject("source"));
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull()) {
        JsonArray jsonArraymeta = jsonObj.getAsJsonArray("meta");
        if (jsonArraymeta != null) {
          // ensure the json data is an array
          if (!jsonObj.get("meta").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `meta` to be an array in the JSON string but got `%s`", jsonObj.get("meta").toString()));
          }

          // validate the optional field `meta` (array)
          for (int i = 0; i < jsonArraymeta.size(); i++) {
            MetaInner.validateJsonObject(jsonArraymeta.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Alert.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Alert' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Alert> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Alert.class));

       return (TypeAdapter<T>) new TypeAdapter<Alert>() {
           @Override
           public void write(JsonWriter out, Alert value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Alert read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Alert instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Alert given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Alert
  * @throws IOException if the JSON string is invalid with respect to Alert
  */
  public static Alert fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Alert.class);
  }

 /**
  * Convert an instance of Alert to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

