/*
 * Swagger CrowdSec
 * CrowdSec local API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: contact@crowdsec.net
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Decision;
import com.konfigthis.client.model.DecisionsStreamResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BouncersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BouncersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BouncersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getDecisionsStreamCall(Boolean startup, String scopes, String origins, String scenariosContaining, String scenariosNotContaining, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/decisions/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startup", startup));
        }

        if (scopes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scopes", scopes));
        }

        if (origins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origins", origins));
        }

        if (scenariosContaining != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarios_containing", scenariosContaining));
        }

        if (scenariosNotContaining != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarios_not_containing", scenariosNotContaining));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyAuthorizer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDecisionsStreamValidateBeforeCall(Boolean startup, String scopes, String origins, String scenariosContaining, String scenariosNotContaining, final ApiCallback _callback) throws ApiException {
        return getDecisionsStreamCall(startup, scopes, origins, scenariosContaining, scenariosNotContaining, _callback);

    }


    private ApiResponse<DecisionsStreamResponse> getDecisionsStreamWithHttpInfo(Boolean startup, String scopes, String origins, String scenariosContaining, String scenariosNotContaining) throws ApiException {
        okhttp3.Call localVarCall = getDecisionsStreamValidateBeforeCall(startup, scopes, origins, scenariosContaining, scenariosNotContaining, null);
        Type localVarReturnType = new TypeToken<DecisionsStreamResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDecisionsStreamAsync(Boolean startup, String scopes, String origins, String scenariosContaining, String scenariosNotContaining, final ApiCallback<DecisionsStreamResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDecisionsStreamValidateBeforeCall(startup, scopes, origins, scenariosContaining, scenariosNotContaining, _callback);
        Type localVarReturnType = new TypeToken<DecisionsStreamResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDecisionsStreamRequestBuilder {
        private Boolean startup;
        private String scopes;
        private String origins;
        private String scenariosContaining;
        private String scenariosNotContaining;

        private GetDecisionsStreamRequestBuilder() {
        }

        /**
         * Set startup
         * @param startup If true, means that the bouncers is starting and a full list must be provided (optional)
         * @return GetDecisionsStreamRequestBuilder
         */
        public GetDecisionsStreamRequestBuilder startup(Boolean startup) {
            this.startup = startup;
            return this;
        }
        
        /**
         * Set scopes
         * @param scopes Comma separated scopes of decisions to fetch (optional)
         * @return GetDecisionsStreamRequestBuilder
         */
        public GetDecisionsStreamRequestBuilder scopes(String scopes) {
            this.scopes = scopes;
            return this;
        }
        
        /**
         * Set origins
         * @param origins Comma separated name of origins. If provided, then only the decisions originating from provided origins would be returned. (optional)
         * @return GetDecisionsStreamRequestBuilder
         */
        public GetDecisionsStreamRequestBuilder origins(String origins) {
            this.origins = origins;
            return this;
        }
        
        /**
         * Set scenariosContaining
         * @param scenariosContaining Comma separated words. If provided, only the decisions created by scenarios containing any of the provided word would be returned. (optional)
         * @return GetDecisionsStreamRequestBuilder
         */
        public GetDecisionsStreamRequestBuilder scenariosContaining(String scenariosContaining) {
            this.scenariosContaining = scenariosContaining;
            return this;
        }
        
        /**
         * Set scenariosNotContaining
         * @param scenariosNotContaining Comma separated words. If provided, only the decisions created by scenarios, not containing any of the provided word would be returned. (optional)
         * @return GetDecisionsStreamRequestBuilder
         */
        public GetDecisionsStreamRequestBuilder scenariosNotContaining(String scenariosNotContaining) {
            this.scenariosNotContaining = scenariosNotContaining;
            return this;
        }
        
        /**
         * Build call for getDecisionsStream
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDecisionsStreamCall(startup, scopes, origins, scenariosContaining, scenariosNotContaining, _callback);
        }


        /**
         * Execute getDecisionsStream request
         * @return DecisionsStreamResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public DecisionsStreamResponse execute() throws ApiException {
            ApiResponse<DecisionsStreamResponse> localVarResp = getDecisionsStreamWithHttpInfo(startup, scopes, origins, scenariosContaining, scenariosNotContaining);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDecisionsStream request with HTTP info returned
         * @return ApiResponse&lt;DecisionsStreamResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DecisionsStreamResponse> executeWithHttpInfo() throws ApiException {
            return getDecisionsStreamWithHttpInfo(startup, scopes, origins, scenariosContaining, scenariosNotContaining);
        }

        /**
         * Execute getDecisionsStream request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DecisionsStreamResponse> _callback) throws ApiException {
            return getDecisionsStreamAsync(startup, scopes, origins, scenariosContaining, scenariosNotContaining, _callback);
        }
    }

    /**
     * getDecisionsStream
     * Returns a list of new/expired decisions. Intended for bouncers that need to \&quot;stream\&quot; decisions
     * @return GetDecisionsStreamRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetDecisionsStreamRequestBuilder getDecisionsStream() throws IllegalArgumentException {
        return new GetDecisionsStreamRequestBuilder();
    }
    private okhttp3.Call getDecisionsStream_0Call(Boolean startup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/decisions/stream";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startup", startup));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyAuthorizer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDecisionsStream_0ValidateBeforeCall(Boolean startup, final ApiCallback _callback) throws ApiException {
        return getDecisionsStream_0Call(startup, _callback);

    }


    private ApiResponse<Void> getDecisionsStream_0WithHttpInfo(Boolean startup) throws ApiException {
        okhttp3.Call localVarCall = getDecisionsStream_0ValidateBeforeCall(startup, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDecisionsStream_0Async(Boolean startup, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDecisionsStream_0ValidateBeforeCall(startup, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDecisionsStream0RequestBuilder {
        private Boolean startup;

        private GetDecisionsStream0RequestBuilder() {
        }

        /**
         * Set startup
         * @param startup If true, means that the bouncer is starting and a full list must be provided (optional)
         * @return GetDecisionsStream0RequestBuilder
         */
        public GetDecisionsStream0RequestBuilder startup(Boolean startup) {
            this.startup = startup;
            return this;
        }
        
        /**
         * Build call for getDecisionsStream_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDecisionsStream_0Call(startup, _callback);
        }


        /**
         * Execute getDecisionsStream_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDecisionsStream_0WithHttpInfo(startup);
        }

        /**
         * Execute getDecisionsStream_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDecisionsStream_0WithHttpInfo(startup);
        }

        /**
         * Execute getDecisionsStream_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDecisionsStream_0Async(startup, _callback);
        }
    }

    /**
     * GetDecisionsStream
     * Returns a list of new/expired decisions. Intended for bouncers that need to \&quot;stream\&quot; decisions
     * @return GetDecisionsStream0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
     </table>
     */
    public GetDecisionsStream0RequestBuilder getDecisionsStream_0() throws IllegalArgumentException {
        return new GetDecisionsStream0RequestBuilder();
    }
    private okhttp3.Call getInformationCall(String scope, String value, String type, String ip, String range, Boolean contains, String origins, String scenariosContaining, String scenariosNotContaining, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/decisions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        if (contains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contains", contains));
        }

        if (origins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origins", origins));
        }

        if (scenariosContaining != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarios_containing", scenariosContaining));
        }

        if (scenariosNotContaining != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scenarios_not_containing", scenariosNotContaining));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInformationValidateBeforeCall(String scope, String value, String type, String ip, String range, Boolean contains, String origins, String scenariosContaining, String scenariosNotContaining, final ApiCallback _callback) throws ApiException {
        return getInformationCall(scope, value, type, ip, range, contains, origins, scenariosContaining, scenariosNotContaining, _callback);

    }


    private ApiResponse<List<Decision>> getInformationWithHttpInfo(String scope, String value, String type, String ip, String range, Boolean contains, String origins, String scenariosContaining, String scenariosNotContaining) throws ApiException {
        okhttp3.Call localVarCall = getInformationValidateBeforeCall(scope, value, type, ip, range, contains, origins, scenariosContaining, scenariosNotContaining, null);
        Type localVarReturnType = new TypeToken<List<Decision>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInformationAsync(String scope, String value, String type, String ip, String range, Boolean contains, String origins, String scenariosContaining, String scenariosNotContaining, final ApiCallback<List<Decision>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInformationValidateBeforeCall(scope, value, type, ip, range, contains, origins, scenariosContaining, scenariosNotContaining, _callback);
        Type localVarReturnType = new TypeToken<List<Decision>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetInformationRequestBuilder {
        private String scope;
        private String value;
        private String type;
        private String ip;
        private String range;
        private Boolean contains;
        private String origins;
        private String scenariosContaining;
        private String scenariosNotContaining;

        private GetInformationRequestBuilder() {
        }

        /**
         * Set scope
         * @param scope scope to which the decision applies (ie. IP/Range/Username/Session/...) (optional)
         * @return GetInformationRequestBuilder
         */
        public GetInformationRequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Set value
         * @param value the value to match for in the specified scope (optional)
         * @return GetInformationRequestBuilder
         */
        public GetInformationRequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set type
         * @param type type of decision (optional)
         * @return GetInformationRequestBuilder
         */
        public GetInformationRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set ip
         * @param ip IP to search for (shorthand for scope&#x3D;ip&amp;value&#x3D;) (optional)
         * @return GetInformationRequestBuilder
         */
        public GetInformationRequestBuilder ip(String ip) {
            this.ip = ip;
            return this;
        }
        
        /**
         * Set range
         * @param range range to search for (shorthand for scope&#x3D;range&amp;value&#x3D;) (optional)
         * @return GetInformationRequestBuilder
         */
        public GetInformationRequestBuilder range(String range) {
            this.range = range;
            return this;
        }
        
        /**
         * Set contains
         * @param contains indicate if you&#39;re looking for a decision that contains the value, or that is contained within the value (optional)
         * @return GetInformationRequestBuilder
         */
        public GetInformationRequestBuilder contains(Boolean contains) {
            this.contains = contains;
            return this;
        }
        
        /**
         * Set origins
         * @param origins Comma separated name of origins. If provided, then only the decisions originating from provided origins would be returned. (optional)
         * @return GetInformationRequestBuilder
         */
        public GetInformationRequestBuilder origins(String origins) {
            this.origins = origins;
            return this;
        }
        
        /**
         * Set scenariosContaining
         * @param scenariosContaining Comma separated words. If provided, only the decisions created by scenarios containing any of the provided word would be returned. (optional)
         * @return GetInformationRequestBuilder
         */
        public GetInformationRequestBuilder scenariosContaining(String scenariosContaining) {
            this.scenariosContaining = scenariosContaining;
            return this;
        }
        
        /**
         * Set scenariosNotContaining
         * @param scenariosNotContaining Comma separated words. If provided, only the decisions created by scenarios, not containing any of the provided word would be returned. (optional)
         * @return GetInformationRequestBuilder
         */
        public GetInformationRequestBuilder scenariosNotContaining(String scenariosNotContaining) {
            this.scenariosNotContaining = scenariosNotContaining;
            return this;
        }
        
        /**
         * Build call for getInformation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInformationCall(scope, value, type, ip, range, contains, origins, scenariosContaining, scenariosNotContaining, _callback);
        }


        /**
         * Execute getInformation request
         * @return List&lt;Decision&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public List<Decision> execute() throws ApiException {
            ApiResponse<List<Decision>> localVarResp = getInformationWithHttpInfo(scope, value, type, ip, range, contains, origins, scenariosContaining, scenariosNotContaining);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getInformation request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Decision&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Decision>> executeWithHttpInfo() throws ApiException {
            return getInformationWithHttpInfo(scope, value, type, ip, range, contains, origins, scenariosContaining, scenariosNotContaining);
        }

        /**
         * Execute getInformation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Decision>> _callback) throws ApiException {
            return getInformationAsync(scope, value, type, ip, range, contains, origins, scenariosContaining, scenariosNotContaining, _callback);
        }
    }

    /**
     * getDecisions
     * Returns information about existing decisions
     * @return GetInformationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
     </table>
     */
    public GetInformationRequestBuilder getInformation() throws IllegalArgumentException {
        return new GetInformationRequestBuilder();
    }
    private okhttp3.Call getInformation_0Call(String scope, String value, String type, String ip, String range, Boolean contains, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/decisions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (range != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("range", range));
        }

        if (contains != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contains", contains));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "APIKeyAuthorizer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInformation_0ValidateBeforeCall(String scope, String value, String type, String ip, String range, Boolean contains, final ApiCallback _callback) throws ApiException {
        return getInformation_0Call(scope, value, type, ip, range, contains, _callback);

    }


    private ApiResponse<Void> getInformation_0WithHttpInfo(String scope, String value, String type, String ip, String range, Boolean contains) throws ApiException {
        okhttp3.Call localVarCall = getInformation_0ValidateBeforeCall(scope, value, type, ip, range, contains, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getInformation_0Async(String scope, String value, String type, String ip, String range, Boolean contains, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInformation_0ValidateBeforeCall(scope, value, type, ip, range, contains, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetInformation0RequestBuilder {
        private String scope;
        private String value;
        private String type;
        private String ip;
        private String range;
        private Boolean contains;

        private GetInformation0RequestBuilder() {
        }

        /**
         * Set scope
         * @param scope scope to which the decision applies (ie. IP/Range/Username/Session/...) (optional)
         * @return GetInformation0RequestBuilder
         */
        public GetInformation0RequestBuilder scope(String scope) {
            this.scope = scope;
            return this;
        }
        
        /**
         * Set value
         * @param value the value to match for in the specified scope (optional)
         * @return GetInformation0RequestBuilder
         */
        public GetInformation0RequestBuilder value(String value) {
            this.value = value;
            return this;
        }
        
        /**
         * Set type
         * @param type type of decision (optional)
         * @return GetInformation0RequestBuilder
         */
        public GetInformation0RequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set ip
         * @param ip IP to search for (shorthand for scope&#x3D;ip&amp;value&#x3D;) (optional)
         * @return GetInformation0RequestBuilder
         */
        public GetInformation0RequestBuilder ip(String ip) {
            this.ip = ip;
            return this;
        }
        
        /**
         * Set range
         * @param range range to search for (shorthand for scope&#x3D;range&amp;value&#x3D;) (optional)
         * @return GetInformation0RequestBuilder
         */
        public GetInformation0RequestBuilder range(String range) {
            this.range = range;
            return this;
        }
        
        /**
         * Set contains
         * @param contains indicate if you&#39;re looking for a decision that contains the value, or that is contained within the value (optional)
         * @return GetInformation0RequestBuilder
         */
        public GetInformation0RequestBuilder contains(Boolean contains) {
            this.contains = contains;
            return this;
        }
        
        /**
         * Build call for getInformation_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInformation_0Call(scope, value, type, ip, range, contains, _callback);
        }


        /**
         * Execute getInformation_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getInformation_0WithHttpInfo(scope, value, type, ip, range, contains);
        }

        /**
         * Execute getInformation_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getInformation_0WithHttpInfo(scope, value, type, ip, range, contains);
        }

        /**
         * Execute getInformation_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getInformation_0Async(scope, value, type, ip, range, contains, _callback);
        }
    }

    /**
     * GetDecisions
     * Returns information about existing decisions
     * @return GetInformation0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400 response </td><td>  -  </td></tr>
     </table>
     */
    public GetInformation0RequestBuilder getInformation_0() throws IllegalArgumentException {
        return new GetInformation0RequestBuilder();
    }
}
